{
	"name": "Stream Ingestion to Cosmos",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "SparkPool001v1",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "e31ea114-55cf-4b76-8715-314e90a0a640"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/924cf5c7-5f72-42ba-98ee-7ea905016982/resourceGroups/trainingresourcegroupv10/providers/Microsoft.Synapse/workspaces/trainingsynapseresources/bigDataPools/SparkPool001v1",
				"name": "SparkPool001v1",
				"type": "Spark",
				"endpoint": "https://trainingsynapseresources.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool001v1",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 3,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"dfStream = ( \\\r\n",
					"    spark \\\r\n",
					"        .readStream \\\r\n",
					"        .format(\"rate\") \\\r\n",
					"        .option(\"rowsPerSecond\", 10)\r\n",
					"        .load()\r\n",
					")"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pyspark.sql.functions as F\r\n",
					"from pyspark.sql.types import StringType\r\n",
					"import uuid\r\n",
					"\r\n",
					"numberOfDevices = 10\r\n",
					"generate_uuid = F.udf(lambda : str(uuid.uuid4()), StringType())\r\n",
					"\r\n",
					"dfIoTSignals = (dfStream \r\n",
					"    .withColumn(\"id\", generate_uuid())\r\n",
					"    .withColumn(\"deviceId\", F.concat(F.lit(\"dev-\"), F.expr(\"mod(value, %d)\" % numberOfDevices)))\r\n",
					"    .withColumn(\"dateTime\", dfStream[\"timestamp\"].cast(StringType()))\r\n",
					"    .withColumn(\"unit\", F.expr(\"CASE WHEN rand() < 0.5 THEN 'Revolutions Per Minute' ELSE 'Megawatts' END\"))\r\n",
					"    .withColumn(\"unitSymbol\", F.expr(\"CASE WHEN rand() < 0.5 THEN 'RPM' ELSE 'MW' END\"))\r\n",
					"    .withColumn(\"measureType\", F.expr(\"CASE WHEN rand() < 0.5 THEN 'Rotation Speed' ELSE 'Output' END\"))\r\n",
					"    .withColumn(\"measureValue\", F.expr(\"CASE WHEN rand() > 0.95 THEN value * 10 WHEN rand() < 0.05 THEN value div 10 ELSE value END\"))\r\n",
					"    .drop(\"timestamp\", \"value\"))"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"streamQuery = \\\r\n",
					"    dfIoTSignals \\\r\n",
					"        .writeStream \\\r\n",
					"        .format(\"cosmos.oltp\") \\\r\n",
					"        .outputMode(\"append\") \\\r\n",
					"        .option(\"spark.synapse.linkedService\")"
				],
				"execution_count": null
			}
		]
	}
}
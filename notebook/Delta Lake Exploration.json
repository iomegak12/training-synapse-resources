{
	"name": "Delta Lake Exploration",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "SparkPool001v1",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "492b85df-1e6b-445c-8028-f3ed6297f0bb"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/924cf5c7-5f72-42ba-98ee-7ea905016982/resourceGroups/trainingresourcegroupv10/providers/Microsoft.Synapse/workspaces/trainingsynapseresources/bigDataPools/SparkPool001v1",
				"name": "SparkPool001v1",
				"type": "Spark",
				"endpoint": "https://trainingsynapseresources.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool001v1",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 3,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import random\r\n",
					"\r\n",
					"session_id = random.randint(1,1000000)\r\n",
					"delta_table_path = \"/delta-training/delta-table-{0}\".format(session_id)\r\n",
					"\r\n",
					"delta_table_path"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"data = spark.range(0,10)\r\n",
					"data.show()\r\n",
					"\r\n",
					"data \\\r\n",
					"    .write \\\r\n",
					"    .format(\"delta\") \\\r\n",
					"    .save(delta_table_path)"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df = spark \\\r\n",
					"    .read \\\r\n",
					"    .format(\"delta\") \\\r\n",
					"    .load(delta_table_path)\r\n",
					"\r\n",
					"df.show()"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"data = spark.range(10, 20)\r\n",
					"data \\\r\n",
					"    .write \\\r\n",
					"    .format(\"delta\") \\\r\n",
					"    .mode(\"overwrite\") \\\r\n",
					"    .save(delta_table_path)"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"data \\\r\n",
					"    .write \\\r\n",
					"    .format(\"delta\") \\\r\n",
					"    .saveAsTable(\"ManagedDeltaTablev2\")"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"\r\n",
					"CREATE TABLE ExternalDeltaTablev2\r\n",
					"USING DELTA\r\n",
					"LOCATION '/delta-training/delta-table-645199'"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"\r\n",
					"SHOW TABLES"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"\r\n",
					"DESCRIBE EXTENDED manageddeltatablev2"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(delta_table_path)"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from delta.tables import *\r\n",
					"from pyspark.sql.functions import *\r\n",
					"\r\n",
					"delta_table = DeltaTable.forPath(spark, delta_table_path)\r\n",
					"delta_table.update(\r\n",
					"    condition = expr (\"id % 2 == 1\"),\r\n",
					"    set = { \"id\": expr(\"id + 100\")}\r\n",
					")\r\n",
					"\r\n",
					"delta_table.delete(\"id >= 9\")\r\n",
					"\r\n",
					"delta_table.toDF().show()"
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"data = spark.range(10, 20)\r\n",
					"data \\\r\n",
					"    .write \\\r\n",
					"    .format(\"delta\") \\\r\n",
					"    .mode(\"overwrite\") \\\r\n",
					"    .save(delta_table_path)"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"new_data = spark.range(15, 25)\r\n",
					"\r\n",
					"delta_table = DeltaTable.forPath(spark, delta_table_path)\r\n",
					"\r\n",
					"delta_table \\\r\n",
					"    .alias(\"oldData\") \\\r\n",
					"    .merge(new_data.alias(\"newData\"), \"oldData.id = newData.id\") \\\r\n",
					"    .whenMatchedUpdate(set = {'id': lit(-1)}) \\\r\n",
					"    .whenNotMatchedInsert(values = { 'id': col(\"newData.id\") }) \\\r\n",
					"    .execute()\r\n",
					"\r\n",
					"delta_table.toDF().show()"
				],
				"execution_count": 15
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"delta_table \\\r\n",
					"    .history() \\\r\n",
					"    .show()"
				],
				"execution_count": 16
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df = spark \\\r\n",
					"    .read \\\r\n",
					"    .format (\"delta\") \\\r\n",
					"    .option(\"versionAsOf\", 0) \\\r\n",
					"    .load(delta_table_path)\r\n",
					"\r\n",
					"df.show()"
				],
				"execution_count": 18
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"streaming_df = \\\r\n",
					"    spark \\\r\n",
					"        .readStream \\\r\n",
					"        .format(\"rate\") \\\r\n",
					"        .load()\r\n",
					"    \r\n",
					"stream = streaming_df \\\r\n",
					"    .selectExpr(\"value as id\") \\\r\n",
					"    .writeStream \\\r\n",
					"    .format(\"delta\") \\\r\n",
					"    .option(\"checkpointLocation\", \"/tmp/checkpoint-{0}\".format(session_id)) \\\r\n",
					"    .start(delta_table_path)\r\n",
					"\r\n",
					"stream.status"
				],
				"execution_count": 19
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"delta_table \\\r\n",
					"    .toDF() \\\r\n",
					"    .sort(col(\"id\").desc()) \\\r\n",
					"    .show(100)"
				],
				"execution_count": 20
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"delta_table \\\r\n",
					"    .history() \\\r\n",
					"    .show()"
				],
				"execution_count": 21
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"stream.stop()"
				],
				"execution_count": 22
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"partition_count = 2\r\n",
					"\r\n",
					"spar"
				],
				"execution_count": null
			}
		]
	}
}